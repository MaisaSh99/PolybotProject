name: Polybot Deploy Prod

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      image:
        required: true
        type: string

jobs:
  Deploy:
    runs-on: ubuntu-latest
    env:
      PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
      EC2_IP: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}
      
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Upload Docker compose and configs
        run: |
          scp -i key.pem -o StrictHostKeyChecking=no docker-compose.prod.yaml $EC2_USER@$EC2_IP:~/docker-compose.prod.yaml
          scp -i key.pem -o StrictHostKeyChecking=no otelcol-config.yaml $EC2_USER@$EC2_IP:~/otelcol-config.yaml
          scp -i key.pem -o StrictHostKeyChecking=no .github/scripts/install_otelcol.sh $EC2_USER@$EC2_IP:~/install_otelcol.sh
          scp -i key.pem -o StrictHostKeyChecking=no .github/scripts/install_prometheus.sh $EC2_USER@$EC2_IP:~/install_prometheus.sh

      - name: Deploy Docker image
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_IP << 'EOF'
            set -e
            
            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              echo "üì¶ Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y docker.io docker-compose-plugin
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER
            fi

            # Generate .env file
            echo """
            IMG_NAME=${{ inputs.image }}
            TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN_PROD }}
            TELEGRAM_APP_URL=https://maisaprod.fursa.click
            """ > .env

            # Stop existing containers
            docker compose -f docker-compose.prod.yaml down || true
            
            # Pull the new image
            docker pull ${{ inputs.image }}
            
            # Start the containers using docker compose
            docker compose -f docker-compose.prod.yaml up -d

            # Wait for health check
            echo "‚è± Waiting for service to be healthy..."
            for i in {1..12}; do
              sleep 10
              if docker exec polybot-prod curl -f http://localhost:8443/health >/dev/null 2>&1; then
                echo "‚úÖ Health check passed."
                break
              else
                echo "‚è≥ Retry $i failed. Waiting..."
                if [ $i -eq 12 ]; then
                  echo "‚ùå Health check failed after 2 minutes"
                  docker compose -f docker-compose.prod.yaml logs polybot
                  exit 1
                fi
              fi
            done

            echo "‚úÖ Production Polybot deployment complete."
          EOF
