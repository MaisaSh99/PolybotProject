name: Test

on:
  pull_request:
    branches:
      - main

# Add permissions for the workflow
permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  TestImgProcessingChatbotApp:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          pip install -r polybot/requirements.txt

      - name: Test filters
        run: |
          echo -e "\n\nTesting concat()\n"
          python -m polybot.test.test_concat

          echo -e "\n\nTesting rotate()\n"
          python -m polybot.test.test_rotate

          echo -e "\n\nTesting salt_n_pepper()\n"
          python -m polybot.test.test_salt_n_pepper

          echo -e "\n\nTesting segment()\n"
          python -m polybot.test.test_segment

      - name: Test Telegram bot logic
        run: |
          python -m polybot.test.test_telegram_bot

  DockerScoutScan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build Docker image for scanning
        run: |
          # Build the image that will be scanned
          docker build -t polybot-scan:${{ github.sha }} .

      - name: Run Docker Scout vulnerability scan
        uses: docker/scout-action@v1
        with:
          command: cves
          image: polybot-scan:${{ github.sha }}
          sarif-file: sarif.output.json
          summary: true

      - name: Upload SARIF result
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: sarif.output.json

      - name: Run Docker Scout with fail on critical/high
        uses: docker/scout-action@v1
        with:
          command: cves
          image: polybot-scan:${{ github.sha }}
          exit-code: true
          exit-on: vulnerability
          # Fail on CRITICAL and HIGH vulnerabilities
          severity: critical,high

      - name: Generate Docker Scout report for PR comment
        id: scout-report
        uses: docker/scout-action@v1
        with:
          command: cves
          image: polybot-scan:${{ github.sha }}
          format: markdown
          output: scout-report.md
        continue-on-error: true

      - name: Comment PR with Docker Scout results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportPath = 'scout-report.md';
            
            if (fs.existsSync(reportPath)) {
              const report = fs.readFileSync(reportPath, 'utf8');
              
              // Find existing Scout comment
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              });
              
              const existingComment = comments.data.find(comment => 
                comment.body.includes('## üîç Docker Scout Vulnerability Report')
              );
              
              const commentBody = `## üîç Docker Scout Vulnerability Report
              
              ${report}
              
              ---
              *This report was automatically generated by Docker Scout*`;
              
              if (existingComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: commentBody
                });
                console.log('Updated existing Docker Scout comment');
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: commentBody
                });
                console.log('Created new Docker Scout comment');
              }
            } else {
              console.log('No Docker Scout report file found');
            }